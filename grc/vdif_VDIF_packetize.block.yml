id: vdif_VDIF_packetize
label: VDIF_packetize
category: '[vdif]'

templates:
  imports: import vdif
  make: vdif.VDIF_packetize(${frame_length}, ${start_time})

#  Make one 'parameters' list entry for every parameter you want settable from the GUI.
#     Keys include:
#     * id (makes the value accessible as \$keyname, e.g. in the make entry)
#     * label (label shown in the GUI)
#     * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
parameters:
- id: frame_length
  label: Frame Length
  dtype: int
- id: start_time
  label: Start Time
  dtype: int
- id: vtp
  label: VTP
  dtype: bool
  default: False
- id: station_code
  label: Station Code
  dtype: string
  default: 'DW'

asserts:
- ${ len(station_code) < 3 }
- ${ station_code[0].isupper() or '0' <= station_code[0] <= '9' }
- ${ station_code[1].isupper() or '0' <= station_code[1] <= '9' }

#  Make one 'inputs' list entry per input and one 'outputs' list entry per output.
#  Keys include:
#      * label (an identifier for the GUI)
#      * domain (optional - stream or message. Default is stream)
#      * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#      * vlen (optional - data stream vector length. Default is 1)
#      * optional (optional - set to 1 for optional inputs. Default is 0)
inputs:
- label: in
  dtype: byte

outputs:
- label: out
  dtype: byte

documentation: |-
    This block takes packed (4 samples / byte) 2 bit sampled data, and adds a VDIF header in front.

    Optionally, it can add a VTP counter in front of that.

    Start_time must be in unix epoch seconds.

    Frame size is in bytes, e.g. 8000.

    Station Code must be 2 characters in length, uppercase or numbers.

#  'file_format' specifies the version of the GRC yml format used in the file
#  and should usually not be changed.
file_format: 1
